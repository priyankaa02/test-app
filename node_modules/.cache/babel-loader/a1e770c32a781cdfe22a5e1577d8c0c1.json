{"ast":null,"code":"import _slicedToArray from \"/Users/priyanka/Documents/weather-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/priyanka/Documents/weather-app/src/components/WeatherCheck/index.js\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport Loading from '../Loading';\nimport { Button, Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions as weatherActions, selectors as weatherSelectors } from '../../reducers/weather';\nimport DataSection from './DataSection';\n\nconst WeatherCheck = () => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        dropdownOpen = _useState2[0],\n        setDropdownOpen = _useState2[1];\n\n  const _useState3 = useState('Select City'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        dropdownValue = _useState4[0],\n        setDropdownValue = _useState4[1];\n\n  const toggle = () => setDropdownOpen(prevState => !prevState);\n\n  const onClickSelect = val => {\n    setDropdownValue(val);\n  };\n\n  const loading = useSelector(weatherSelectors.selectLoading);\n  const fetchErr = useSelector(weatherSelectors.selectFetchErr);\n  const errMsg = useSelector(weatherSelectors.selectErrMsg);\n  const weatherData = useSelector(weatherSelectors.selectWeather);\n  console.log('***weatherData', weatherData);\n  const dispatch = useDispatch();\n  const onSubmit = useCallback(() => {\n    dispatch(weatherActions.setLoading(true));\n    dispatch(weatherActions.getWeatherRequest(dropdownValue));\n  }, [dispatch, dropdownValue]);\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(Dropdown, {\n    isOpen: dropdownOpen,\n    size: \"lg\",\n    toggle: toggle,\n    className: \"dropdown\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(DropdownToggle, {\n    caret: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, dropdownValue), React.createElement(DropdownMenu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(DropdownItem, {\n    onClick: () => onClickSelect(\"New York\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"New York\"), React.createElement(DropdownItem, {\n    onClick: () => onClickSelect(\"Chicago\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Chicago\"), React.createElement(DropdownItem, {\n    onClick: () => onClickSelect(\"Washington\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Washington\"), React.createElement(DropdownItem, {\n    onClick: () => onClickSelect(\"San Francisco\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"San Francisco\"), React.createElement(DropdownItem, {\n    onClick: () => onClickSelect(\"Boston\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Boston\"))), React.createElement(Button, {\n    outline: true,\n    color: \"primary\",\n    className: \"button\",\n    size: \"lg\",\n    onClick: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Submit\"), fetchErr && React.createElement(\"p\", {\n    className: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, errMsg), loading && React.createElement(Loading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), weatherData !== '' && React.createElement(DataSection, {\n    obj: weatherData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }));\n};\n\nexport default WeatherCheck;","map":{"version":3,"sources":["/Users/priyanka/Documents/weather-app/src/components/WeatherCheck/index.js"],"names":["React","useState","useCallback","useEffect","Loading","Button","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","useDispatch","useSelector","actions","weatherActions","selectors","weatherSelectors","DataSection","WeatherCheck","dropdownOpen","setDropdownOpen","dropdownValue","setDropdownValue","toggle","prevState","onClickSelect","val","loading","selectLoading","fetchErr","selectFetchErr","errMsg","selectErrMsg","weatherData","selectWeather","console","log","dispatch","onSubmit","setLoading","getWeatherRequest"],"mappings":"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","sourcesContent":["import React, {useState, useCallback, useEffect} from 'react';\nimport Loading from '../Loading';\nimport {Button, Dropdown, DropdownToggle, DropdownMenu, DropdownItem} from 'reactstrap';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {\n  actions as weatherActions,\n  selectors as weatherSelectors,\n} from '../../reducers/weather';\nimport DataSection from './DataSection'\n\nconst WeatherCheck = () => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [dropdownValue, setDropdownValue] = useState('Select City');\n  const toggle = () => setDropdownOpen(prevState => !prevState);\n  const onClickSelect = (val) => {\n      setDropdownValue(val);\n  }\n  const loading = useSelector(weatherSelectors.selectLoading);\n  const fetchErr = useSelector(weatherSelectors.selectFetchErr);\n  const errMsg = useSelector(weatherSelectors.selectErrMsg);\n  const weatherData = useSelector(weatherSelectors.selectWeather);\n  console.log('***weatherData', weatherData);\n  const dispatch = useDispatch();\n  const onSubmit = useCallback(() => {\n    dispatch(weatherActions.setLoading(true));\n    dispatch(weatherActions.getWeatherRequest(dropdownValue));\n  }, [dispatch, dropdownValue]);\n  return (\n    <div className=\"container\">\n      <Dropdown isOpen={dropdownOpen} size=\"lg\" toggle={toggle} className=\"dropdown\">\n        <DropdownToggle caret>\n          {dropdownValue}\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem onClick={() => onClickSelect(\"New York\")}>New York</DropdownItem>\n          <DropdownItem onClick={() => onClickSelect(\"Chicago\")}>Chicago</DropdownItem>\n          <DropdownItem onClick={() => onClickSelect(\"Washington\")}>Washington</DropdownItem>\n          <DropdownItem onClick={() => onClickSelect(\"San Francisco\")}>San Francisco</DropdownItem>\n          <DropdownItem onClick={() => onClickSelect(\"Boston\")}>Boston</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n      <Button outline color=\"primary\" className=\"button\" size=\"lg\" onClick={onSubmit}>Submit</Button>\n      {fetchErr && (\n        <p className=\"error\">{errMsg}</p>\n      )}\n      {loading && <Loading/>}\n      {weatherData !== '' && <DataSection obj={weatherData}/>}\n    </div>\n  );\n};\n\nexport default WeatherCheck;\n"]},"metadata":{},"sourceType":"module"}