{"ast":null,"code":"import _slicedToArray from\"/Users/priyanka/Documents/weather-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useCallback}from'react';import Loading from'../Loading';import{Button,Dropdown,DropdownToggle,DropdownMenu,DropdownItem}from'reactstrap';import{useDispatch,useSelector}from'react-redux';import{actions as weatherActions,selectors as weatherSelectors}from'../../reducers/weather';import DataSection from'./DataSection';var WeatherCheck=function WeatherCheck(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),dropdownOpen=_useState2[0],setDropdownOpen=_useState2[1];var _useState3=useState('Select City'),_useState4=_slicedToArray(_useState3,2),dropdownValue=_useState4[0],setDropdownValue=_useState4[1];var toggle=function toggle(){return setDropdownOpen(function(prevState){return!prevState;});};var onClickSelect=function onClickSelect(val){setDropdownValue(val);};var loading=useSelector(weatherSelectors.selectLoading);var fetchErr=useSelector(weatherSelectors.selectFetchErr);var errMsg=useSelector(weatherSelectors.selectErrMsg);var weatherData=useSelector(weatherSelectors.selectWeather);console.log('***weatherData',weatherData);var dispatch=useDispatch();var onSubmit=useCallback(function(){dispatch(weatherActions.setLoading(true));dispatch(weatherActions.getWeatherRequest(dropdownValue));},[dispatch,dropdownValue]);return React.createElement(\"div\",{className:\"container\"},React.createElement(Dropdown,{isOpen:dropdownOpen,size:\"lg\",toggle:toggle,className:\"dropdown\"},React.createElement(DropdownToggle,{caret:true},dropdownValue),React.createElement(DropdownMenu,null,React.createElement(DropdownItem,{onClick:function onClick(){return onClickSelect(\"New York\");}},\"New York\"),React.createElement(DropdownItem,{onClick:function onClick(){return onClickSelect(\"Chicago\");}},\"Chicago\"),React.createElement(DropdownItem,{onClick:function onClick(){return onClickSelect(\"Washington\");}},\"Washington\"),React.createElement(DropdownItem,{onClick:function onClick(){return onClickSelect(\"San Francisco\");}},\"San Francisco\"),React.createElement(DropdownItem,{onClick:function onClick(){return onClickSelect(\"Boston\");}},\"Boston\"))),React.createElement(Button,{outline:true,color:\"primary\",className:\"button\",size:\"lg\",onClick:onSubmit},\"Submit\"),fetchErr&&React.createElement(\"p\",{className:\"error\"},errMsg),loading&&React.createElement(Loading,null),weatherData!==''&&React.createElement(DataSection,{obj:weatherData}));};export default WeatherCheck;","map":{"version":3,"sources":["/Users/priyanka/Documents/weather-app/src/components/WeatherCheck/index.js"],"names":["React","useState","useCallback","Loading","Button","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","useDispatch","useSelector","actions","weatherActions","selectors","weatherSelectors","DataSection","WeatherCheck","dropdownOpen","setDropdownOpen","dropdownValue","setDropdownValue","toggle","prevState","onClickSelect","val","loading","selectLoading","fetchErr","selectFetchErr","errMsg","selectErrMsg","weatherData","selectWeather","console","log","dispatch","onSubmit","setLoading","getWeatherRequest"],"mappings":"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","sourcesContent":["import React, {useState, useCallback} from 'react';\nimport Loading from '../Loading';\nimport {Button, Dropdown, DropdownToggle, DropdownMenu, DropdownItem} from 'reactstrap';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {\n  actions as weatherActions,\n  selectors as weatherSelectors,\n} from '../../reducers/weather';\nimport DataSection from './DataSection'\n\nconst WeatherCheck = () => {\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [dropdownValue, setDropdownValue] = useState('Select City');\n  const toggle = () => setDropdownOpen(prevState => !prevState);\n  const onClickSelect = (val) => {\n      setDropdownValue(val);\n  }\n  const loading = useSelector(weatherSelectors.selectLoading);\n  const fetchErr = useSelector(weatherSelectors.selectFetchErr);\n  const errMsg = useSelector(weatherSelectors.selectErrMsg);\n  const weatherData = useSelector(weatherSelectors.selectWeather);\n  console.log('***weatherData', weatherData);\n  const dispatch = useDispatch();\n  const onSubmit = useCallback(() => {\n    dispatch(weatherActions.setLoading(true));\n    dispatch(weatherActions.getWeatherRequest(dropdownValue));\n  }, [dispatch, dropdownValue]);\n  return (\n    <div className=\"container\">\n      <Dropdown isOpen={dropdownOpen} size=\"lg\" toggle={toggle} className=\"dropdown\">\n        <DropdownToggle caret>\n          {dropdownValue}\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem onClick={() => onClickSelect(\"New York\")}>New York</DropdownItem>\n          <DropdownItem onClick={() => onClickSelect(\"Chicago\")}>Chicago</DropdownItem>\n          <DropdownItem onClick={() => onClickSelect(\"Washington\")}>Washington</DropdownItem>\n          <DropdownItem onClick={() => onClickSelect(\"San Francisco\")}>San Francisco</DropdownItem>\n          <DropdownItem onClick={() => onClickSelect(\"Boston\")}>Boston</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n      <Button outline color=\"primary\" className=\"button\" size=\"lg\" onClick={onSubmit}>Submit</Button>\n      {fetchErr && (\n        <p className=\"error\">{errMsg}</p>\n      )}\n      {loading && <Loading/>}\n      {weatherData !== '' && <DataSection obj={weatherData}/>}\n    </div>\n  );\n};\n\nexport default WeatherCheck;\n"]},"metadata":{},"sourceType":"module"}