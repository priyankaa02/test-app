{"ast":null,"code":"import _objectSpread from\"/Users/priyanka/Documents/weather-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";var name='weather';export var types={GET_WEATHER_REQUEST:\"\".concat(name,\"/GET_WEATHER_REQUEST\"),GET_WEATHER_SUCCESS:\"\".concat(name,\"/GET_WEATHER_SUCCESS\"),SET_LOADING:\"\".concat(name,\"/SET_LOADING\"),SET_ERRMSG:\"\".concat(name,\"/SET_ERRMSG\"),SET_FETCH_ERROR:\"\".concat(name,\"/SET_FETCH_ERROR\")};export var actions={getWeatherRequest:function getWeatherRequest(data){return{type:types.GET_WEATHER_REQUEST,payload:data};},getWeatherSuccess:function getWeatherSuccess(response){return{type:types.GET_WEATHER_SUCCESS,payload:response};},setErrMsg:function setErrMsg(m){return{type:types.SET_ERRMSG,payload:m};},setLoading:function setLoading(bool){return{type:types.SET_LOADING,payload:{loading:bool}};},setFetchError:function setFetchError(bool){return{type:types.SET_FETCH_ERROR,payload:{fetchErr:bool}};}};export var selectors={selectWeather:function selectWeather(state){return state[name].weatherData;},selectErrMsg:function selectErrMsg(state){return state[name].errMsg;},selectLoading:function selectLoading(state){return state[name].loading;},selectFetchErr:function selectFetchErr(state){return state[name].fetchErr;}};var initialState={weatherData:'',errMsg:null,loading:false,fetchErr:false};export default(function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case types.SET_LOADING:case types.SET_FETCH_ERROR:case types.GET_WEATHER_REQUEST:{return _objectSpread({},state,{},action.payload);}case types.GET_WEATHER_SUCCESS:{return _objectSpread({},state,{weatherData:action.payload});}case types.SET_ERRMSG:{return _objectSpread({},state,{errMsg:action.payload});}default:return state;}});","map":{"version":3,"sources":["/Users/priyanka/Documents/weather-app/src/reducers/weather/index.js"],"names":["name","types","GET_WEATHER_REQUEST","GET_WEATHER_SUCCESS","SET_LOADING","SET_ERRMSG","SET_FETCH_ERROR","actions","getWeatherRequest","data","type","payload","getWeatherSuccess","response","setErrMsg","m","setLoading","bool","loading","setFetchError","fetchErr","selectors","selectWeather","state","weatherData","selectErrMsg","errMsg","selectLoading","selectFetchErr","initialState","action"],"mappings":"uHAAA,GAAMA,CAAAA,IAAI,CAAG,SAAb,CAEA,MAAO,IAAMC,CAAAA,KAAK,CAAG,CACnBC,mBAAmB,WAAKF,IAAL,wBADA,CAEnBG,mBAAmB,WAAKH,IAAL,wBAFA,CAGnBI,WAAW,WAAKJ,IAAL,gBAHQ,CAInBK,UAAU,WAAKL,IAAL,eAJS,CAKnBM,eAAe,WAAKN,IAAL,oBALI,CAAd,CAQP,MAAO,IAAMO,CAAAA,OAAO,CAAG,CACrBC,iBAAiB,CAAE,2BAACC,IAAD,QAAW,CAC5BC,IAAI,CAAET,KAAK,CAACC,mBADgB,CAE5BS,OAAO,CAAEF,IAFmB,CAAX,EADE,CAKrBG,iBAAiB,CAAE,2BAAAC,QAAQ,QAAK,CAC9BH,IAAI,CAAET,KAAK,CAACE,mBADkB,CAE9BQ,OAAO,CAAEE,QAFqB,CAAL,EALN,CASrBC,SAAS,CAAE,mBAAAC,CAAC,QAAK,CACfL,IAAI,CAAET,KAAK,CAACI,UADG,CAEfM,OAAO,CAAEI,CAFM,CAAL,EATS,CAarBC,UAAU,CAAE,oBAAAC,IAAI,QAAK,CACnBP,IAAI,CAAET,KAAK,CAACG,WADO,CAEnBO,OAAO,CAAE,CAACO,OAAO,CAAED,IAAV,CAFU,CAAL,EAbK,CAiBrBE,aAAa,CAAE,uBAAAF,IAAI,QAAK,CACtBP,IAAI,CAAET,KAAK,CAACK,eADU,CAEtBK,OAAO,CAAE,CAACS,QAAQ,CAAEH,IAAX,CAFa,CAAL,EAjBE,CAAhB,CAuBP,MAAO,IAAMI,CAAAA,SAAS,CAAG,CACvBC,aAAa,CAAE,uBAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACvB,IAAD,CAAL,CAAYwB,WAAhB,EADG,CAEvBC,YAAY,CAAE,sBAAAF,KAAK,QAAIA,CAAAA,KAAK,CAACvB,IAAD,CAAL,CAAY0B,MAAhB,EAFI,CAGvBC,aAAa,CAAE,uBAAAJ,KAAK,QAAIA,CAAAA,KAAK,CAACvB,IAAD,CAAL,CAAYkB,OAAhB,EAHG,CAIvBU,cAAc,CAAE,wBAAAL,KAAK,QAAIA,CAAAA,KAAK,CAACvB,IAAD,CAAL,CAAYoB,QAAhB,EAJE,CAAlB,CAOP,GAAMS,CAAAA,YAAY,CAAG,CACnBL,WAAW,CAAE,EADM,CAEnBE,MAAM,CAAE,IAFW,CAGnBR,OAAO,CAAE,KAHU,CAInBE,QAAQ,CAAE,KAJS,CAArB,CAOA,eAAe,UAAkC,IAAjCG,CAAAA,KAAiC,2DAAzBM,YAAyB,IAAXC,CAAAA,MAAW,2CAC/C,OAAQA,MAAM,CAACpB,IAAf,EACE,IAAKT,CAAAA,KAAK,CAACG,WAAX,CACA,IAAKH,CAAAA,KAAK,CAACK,eAAX,CACA,IAAKL,CAAAA,KAAK,CAACC,mBAAX,CAAgC,CAC9B,wBACKqB,KADL,IAEKO,MAAM,CAACnB,OAFZ,EAID,CACD,IAAKV,CAAAA,KAAK,CAACE,mBAAX,CAAgC,CAC9B,wBAAWoB,KAAX,EAAkBC,WAAW,CAAEM,MAAM,CAACnB,OAAtC,GACD,CACD,IAAKV,CAAAA,KAAK,CAACI,UAAX,CAAuB,CACrB,wBAAWkB,KAAX,EAAkBG,MAAM,CAAEI,MAAM,CAACnB,OAAjC,GACD,CACD,QACE,MAAOY,CAAAA,KAAP,CAhBJ,CAkBD,CAnBD","sourcesContent":["const name = 'weather';\n\nexport const types = {\n  GET_WEATHER_REQUEST: `${name}/GET_WEATHER_REQUEST`,\n  GET_WEATHER_SUCCESS: `${name}/GET_WEATHER_SUCCESS`,\n  SET_LOADING: `${name}/SET_LOADING`,\n  SET_ERRMSG: `${name}/SET_ERRMSG`,\n  SET_FETCH_ERROR: `${name}/SET_FETCH_ERROR`,\n};\n\nexport const actions = {\n  getWeatherRequest: (data) => ({\n    type: types.GET_WEATHER_REQUEST,\n    payload: data,\n  }),\n  getWeatherSuccess: response => ({\n    type: types.GET_WEATHER_SUCCESS,\n    payload: response,\n  }),\n  setErrMsg: m => ({\n    type: types.SET_ERRMSG,\n    payload: m,\n  }),\n  setLoading: bool => ({\n    type: types.SET_LOADING,\n    payload: {loading: bool},\n  }),\n  setFetchError: bool => ({\n    type: types.SET_FETCH_ERROR,\n    payload: {fetchErr: bool},\n  }),\n};\n\nexport const selectors = {\n  selectWeather: state => state[name].weatherData,\n  selectErrMsg: state => state[name].errMsg,\n  selectLoading: state => state[name].loading,\n  selectFetchErr: state => state[name].fetchErr,\n};\n\nconst initialState = {\n  weatherData: '',\n  errMsg: null,\n  loading: false,\n  fetchErr: false,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case types.SET_LOADING:\n    case types.SET_FETCH_ERROR:\n    case types.GET_WEATHER_REQUEST: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n    case types.GET_WEATHER_SUCCESS: {\n      return {...state, weatherData: action.payload};\n    }\n    case types.SET_ERRMSG: {\n      return {...state, errMsg: action.payload};\n    }\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}