{"ast":null,"code":"import _objectSpread from \"/Users/priyanka/Documents/weather-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nconst name = 'weather';\nexport const types = {\n  GET_WEATHER_REQUEST: `${name}/GET_WEATHER_REQUEST`,\n  GET_WEATHER_SUCCESS: `${name}/GET_WEATHER_SUCCESS`,\n  SET_LOADING: `${name}/SET_LOADING`,\n  SET_ERRMSG: `${name}/SET_ERRMSG`,\n  SET_FETCH_ERROR: `${name}/SET_FETCH_ERROR`\n};\nexport const actions = {\n  getWeatherRequest: data => ({\n    type: types.GET_WEATHER_REQUEST,\n    payload: data\n  }),\n  getWeatherSuccess: response => ({\n    type: types.GET_WEATHER_SUCCESS,\n    payload: response\n  }),\n  setErrMsg: m => ({\n    type: types.SET_ERRMSG,\n    payload: m\n  }),\n  setLoading: bool => ({\n    type: types.SET_LOADING,\n    payload: {\n      loading: bool\n    }\n  }),\n  setFetchError: bool => ({\n    type: types.SET_FETCH_ERROR,\n    payload: {\n      fetchErr: bool\n    }\n  })\n};\nexport const selectors = {\n  selectWeather: state => state[name].weatherData,\n  selectErrMsg: state => state[name].errMsg,\n  selectLoading: state => state[name].loading,\n  selectFetchErr: state => state[name].fetchErr\n};\nconst initialState = {\n  weatherData: '',\n  errMsg: null,\n  loading: false,\n  fetchErr: false\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case types.SET_LOADING:\n    case types.SET_FETCH_ERROR:\n    case types.GET_WEATHER_REQUEST:\n      {\n        return _objectSpread({}, state, {}, action.payload);\n      }\n\n    case types.GET_WEATHER_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          weatherData: action.payload\n        });\n      }\n\n    case types.SET_ERRMSG:\n      {\n        return _objectSpread({}, state, {\n          errMsg: action.payload\n        });\n      }\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/priyanka/Documents/weather-app/src/reducers/weather/index.js"],"names":["name","types","GET_WEATHER_REQUEST","GET_WEATHER_SUCCESS","SET_LOADING","SET_ERRMSG","SET_FETCH_ERROR","actions","getWeatherRequest","data","type","payload","getWeatherSuccess","response","setErrMsg","m","setLoading","bool","loading","setFetchError","fetchErr","selectors","selectWeather","state","weatherData","selectErrMsg","errMsg","selectLoading","selectFetchErr","initialState","action"],"mappings":";AAAA,MAAMA,IAAI,GAAG,SAAb;AAEA,OAAO,MAAMC,KAAK,GAAG;AACnBC,EAAAA,mBAAmB,EAAG,GAAEF,IAAK,sBADV;AAEnBG,EAAAA,mBAAmB,EAAG,GAAEH,IAAK,sBAFV;AAGnBI,EAAAA,WAAW,EAAG,GAAEJ,IAAK,cAHF;AAInBK,EAAAA,UAAU,EAAG,GAAEL,IAAK,aAJD;AAKnBM,EAAAA,eAAe,EAAG,GAAEN,IAAK;AALN,CAAd;AAQP,OAAO,MAAMO,OAAO,GAAG;AACrBC,EAAAA,iBAAiB,EAAGC,IAAD,KAAW;AAC5BC,IAAAA,IAAI,EAAET,KAAK,CAACC,mBADgB;AAE5BS,IAAAA,OAAO,EAAEF;AAFmB,GAAX,CADE;AAKrBG,EAAAA,iBAAiB,EAAEC,QAAQ,KAAK;AAC9BH,IAAAA,IAAI,EAAET,KAAK,CAACE,mBADkB;AAE9BQ,IAAAA,OAAO,EAAEE;AAFqB,GAAL,CALN;AASrBC,EAAAA,SAAS,EAAEC,CAAC,KAAK;AACfL,IAAAA,IAAI,EAAET,KAAK,CAACI,UADG;AAEfM,IAAAA,OAAO,EAAEI;AAFM,GAAL,CATS;AAarBC,EAAAA,UAAU,EAAEC,IAAI,KAAK;AACnBP,IAAAA,IAAI,EAAET,KAAK,CAACG,WADO;AAEnBO,IAAAA,OAAO,EAAE;AAACO,MAAAA,OAAO,EAAED;AAAV;AAFU,GAAL,CAbK;AAiBrBE,EAAAA,aAAa,EAAEF,IAAI,KAAK;AACtBP,IAAAA,IAAI,EAAET,KAAK,CAACK,eADU;AAEtBK,IAAAA,OAAO,EAAE;AAACS,MAAAA,QAAQ,EAAEH;AAAX;AAFa,GAAL;AAjBE,CAAhB;AAuBP,OAAO,MAAMI,SAAS,GAAG;AACvBC,EAAAA,aAAa,EAAEC,KAAK,IAAIA,KAAK,CAACvB,IAAD,CAAL,CAAYwB,WADb;AAEvBC,EAAAA,YAAY,EAAEF,KAAK,IAAIA,KAAK,CAACvB,IAAD,CAAL,CAAY0B,MAFZ;AAGvBC,EAAAA,aAAa,EAAEJ,KAAK,IAAIA,KAAK,CAACvB,IAAD,CAAL,CAAYkB,OAHb;AAIvBU,EAAAA,cAAc,EAAEL,KAAK,IAAIA,KAAK,CAACvB,IAAD,CAAL,CAAYoB;AAJd,CAAlB;AAOP,MAAMS,YAAY,GAAG;AACnBL,EAAAA,WAAW,EAAE,EADM;AAEnBE,EAAAA,MAAM,EAAE,IAFW;AAGnBR,EAAAA,OAAO,EAAE,KAHU;AAInBE,EAAAA,QAAQ,EAAE;AAJS,CAArB;AAOA,gBAAe,CAACG,KAAK,GAAGM,YAAT,EAAuBC,MAAvB,KAAkC;AAC/C,UAAQA,MAAM,CAACpB,IAAf;AACE,SAAKT,KAAK,CAACG,WAAX;AACA,SAAKH,KAAK,CAACK,eAAX;AACA,SAAKL,KAAK,CAACC,mBAAX;AAAgC;AAC9B,iCACKqB,KADL,MAEKO,MAAM,CAACnB,OAFZ;AAID;;AACD,SAAKV,KAAK,CAACE,mBAAX;AAAgC;AAC9B,iCAAWoB,KAAX;AAAkBC,UAAAA,WAAW,EAAEM,MAAM,CAACnB;AAAtC;AACD;;AACD,SAAKV,KAAK,CAACI,UAAX;AAAuB;AACrB,iCAAWkB,KAAX;AAAkBG,UAAAA,MAAM,EAAEI,MAAM,CAACnB;AAAjC;AACD;;AACD;AACE,aAAOY,KAAP;AAhBJ;AAkBD,CAnBD","sourcesContent":["const name = 'weather';\n\nexport const types = {\n  GET_WEATHER_REQUEST: `${name}/GET_WEATHER_REQUEST`,\n  GET_WEATHER_SUCCESS: `${name}/GET_WEATHER_SUCCESS`,\n  SET_LOADING: `${name}/SET_LOADING`,\n  SET_ERRMSG: `${name}/SET_ERRMSG`,\n  SET_FETCH_ERROR: `${name}/SET_FETCH_ERROR`,\n};\n\nexport const actions = {\n  getWeatherRequest: (data) => ({\n    type: types.GET_WEATHER_REQUEST,\n    payload: data,\n  }),\n  getWeatherSuccess: response => ({\n    type: types.GET_WEATHER_SUCCESS,\n    payload: response,\n  }),\n  setErrMsg: m => ({\n    type: types.SET_ERRMSG,\n    payload: m,\n  }),\n  setLoading: bool => ({\n    type: types.SET_LOADING,\n    payload: {loading: bool},\n  }),\n  setFetchError: bool => ({\n    type: types.SET_FETCH_ERROR,\n    payload: {fetchErr: bool},\n  }),\n};\n\nexport const selectors = {\n  selectWeather: state => state[name].weatherData,\n  selectErrMsg: state => state[name].errMsg,\n  selectLoading: state => state[name].loading,\n  selectFetchErr: state => state[name].fetchErr,\n};\n\nconst initialState = {\n  weatherData: '',\n  errMsg: null,\n  loading: false,\n  fetchErr: false,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case types.SET_LOADING:\n    case types.SET_FETCH_ERROR:\n    case types.GET_WEATHER_REQUEST: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n    case types.GET_WEATHER_SUCCESS: {\n      return {...state, weatherData: action.payload};\n    }\n    case types.SET_ERRMSG: {\n      return {...state, errMsg: action.payload};\n    }\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}